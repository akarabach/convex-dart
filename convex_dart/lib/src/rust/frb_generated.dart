// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'dart_value.dart';
import 'dart_value/conversion.dart';
import 'dart_value/function.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1831926979;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'convex_dart',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateDartQuerySubscriberOnUpdate({
    required DartQuerySubscriber that,
    required DartFunctionResult value,
  });

  Future<DartValue> crateMobileConvexClientAction({
    required MobileConvexClient that,
    required String name,
    required BTreeMapStringValue args,
  });

  Future<DartValue> crateMobileConvexClientMutation({
    required MobileConvexClient that,
    required String name,
    required BTreeMapStringValue args,
  });

  MobileConvexClient crateMobileConvexClientNew({
    required String deploymentUrl,
    required String clientId,
  });

  Future<DartValue> crateMobileConvexClientQuery({
    required MobileConvexClient that,
    required String name,
    required BTreeMapStringValue args,
  });

  Future<void> crateMobileConvexClientSetAuth({
    required MobileConvexClient that,
    String? token,
  });

  Future<SubscriptionHandle> crateMobileConvexClientSubscribe({
    required MobileConvexClient that,
    required String name,
    required BTreeMapStringValue args,
    required FutureOr<void> Function(DartFunctionResult) onUpdate,
  });

  void crateSubscriptionHandleCancel({required SubscriptionHandle that});

  Map<String, DartValue> crateDartValueConversionBtreemapToHashmap({
    required BTreeMapStringValue btreemap,
  });

  Map<String, DartValue> crateDartValueConversionBtreemapToHashmapDartValue({
    required BTreeMapStringDartValue btreemap,
  });

  BTreeMapStringValue crateDartValueConversionHashmapToBtreemap({
    required Map<String, DartValue> hashmap,
  });

  BTreeMapStringDartValue crateDartValueConversionHashmapToBtreemapDartValue({
    required Map<String, DartValue> hashmap,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_BTreeMapStringDartValue;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_BTreeMapStringDartValue;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_BTreeMapStringDartValuePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_BTreeMapStringValue;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_BTreeMapStringValue;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_BTreeMapStringValuePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DartQuerySubscriber;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DartQuerySubscriber;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_DartQuerySubscriberPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MobileConvexClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MobileConvexClient;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_MobileConvexClientPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SubscriptionHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SubscriptionHandle;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SubscriptionHandlePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateDartQuerySubscriberOnUpdate({
    required DartQuerySubscriber that,
    required DartFunctionResult value,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartQuerySubscriber(
            that,
            serializer,
          );
          sse_encode_box_autoadd_dart_function_result(value, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateDartQuerySubscriberOnUpdateConstMeta,
        argValues: [that, value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDartQuerySubscriberOnUpdateConstMeta =>
      const TaskConstMeta(
        debugName: "DartQuerySubscriber_on_update",
        argNames: ["that", "value"],
      );

  @override
  Future<DartValue> crateMobileConvexClientAction({
    required MobileConvexClient that,
    required String name,
    required BTreeMapStringValue args,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue(
            args,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dart_value,
          decodeErrorData: sse_decode_client_error,
        ),
        constMeta: kCrateMobileConvexClientActionConstMeta,
        argValues: [that, name, args],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMobileConvexClientActionConstMeta =>
      const TaskConstMeta(
        debugName: "MobileConvexClient_action",
        argNames: ["that", "name", "args"],
      );

  @override
  Future<DartValue> crateMobileConvexClientMutation({
    required MobileConvexClient that,
    required String name,
    required BTreeMapStringValue args,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue(
            args,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dart_value,
          decodeErrorData: sse_decode_client_error,
        ),
        constMeta: kCrateMobileConvexClientMutationConstMeta,
        argValues: [that, name, args],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMobileConvexClientMutationConstMeta =>
      const TaskConstMeta(
        debugName: "MobileConvexClient_mutation",
        argNames: ["that", "name", "args"],
      );

  @override
  MobileConvexClient crateMobileConvexClientNew({
    required String deploymentUrl,
    required String clientId,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(deploymentUrl, serializer);
          sse_encode_String(clientId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient,
          decodeErrorData: null,
        ),
        constMeta: kCrateMobileConvexClientNewConstMeta,
        argValues: [deploymentUrl, clientId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMobileConvexClientNewConstMeta => const TaskConstMeta(
    debugName: "MobileConvexClient_new",
    argNames: ["deploymentUrl", "clientId"],
  );

  @override
  Future<DartValue> crateMobileConvexClientQuery({
    required MobileConvexClient that,
    required String name,
    required BTreeMapStringValue args,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue(
            args,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dart_value,
          decodeErrorData: sse_decode_client_error,
        ),
        constMeta: kCrateMobileConvexClientQueryConstMeta,
        argValues: [that, name, args],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMobileConvexClientQueryConstMeta =>
      const TaskConstMeta(
        debugName: "MobileConvexClient_query",
        argNames: ["that", "name", "args"],
      );

  @override
  Future<void> crateMobileConvexClientSetAuth({
    required MobileConvexClient that,
    String? token,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
            that,
            serializer,
          );
          sse_encode_opt_String(token, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_client_error,
        ),
        constMeta: kCrateMobileConvexClientSetAuthConstMeta,
        argValues: [that, token],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMobileConvexClientSetAuthConstMeta =>
      const TaskConstMeta(
        debugName: "MobileConvexClient_set_auth",
        argNames: ["that", "token"],
      );

  @override
  Future<SubscriptionHandle> crateMobileConvexClientSubscribe({
    required MobileConvexClient that,
    required String name,
    required BTreeMapStringValue args,
    required FutureOr<void> Function(DartFunctionResult) onUpdate,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue(
            args,
            serializer,
          );
          sse_encode_DartFn_Inputs_dart_function_result_Output_unit_AnyhowException(
            onUpdate,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle,
          decodeErrorData: sse_decode_client_error,
        ),
        constMeta: kCrateMobileConvexClientSubscribeConstMeta,
        argValues: [that, name, args, onUpdate],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMobileConvexClientSubscribeConstMeta =>
      const TaskConstMeta(
        debugName: "MobileConvexClient_subscribe",
        argNames: ["that", "name", "args", "onUpdate"],
      );

  @override
  void crateSubscriptionHandleCancel({required SubscriptionHandle that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateSubscriptionHandleCancelConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSubscriptionHandleCancelConstMeta =>
      const TaskConstMeta(
        debugName: "SubscriptionHandle_cancel",
        argNames: ["that"],
      );

  @override
  Map<String, DartValue> crateDartValueConversionBtreemapToHashmap({
    required BTreeMapStringValue btreemap,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue(
            btreemap,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_Map_String_dart_value_None,
          decodeErrorData: null,
        ),
        constMeta: kCrateDartValueConversionBtreemapToHashmapConstMeta,
        argValues: [btreemap],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDartValueConversionBtreemapToHashmapConstMeta =>
      const TaskConstMeta(
        debugName: "btreemap_to_hashmap",
        argNames: ["btreemap"],
      );

  @override
  Map<String, DartValue> crateDartValueConversionBtreemapToHashmapDartValue({
    required BTreeMapStringDartValue btreemap,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue(
            btreemap,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_Map_String_dart_value_None,
          decodeErrorData: null,
        ),
        constMeta: kCrateDartValueConversionBtreemapToHashmapDartValueConstMeta,
        argValues: [btreemap],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDartValueConversionBtreemapToHashmapDartValueConstMeta =>
      const TaskConstMeta(
        debugName: "btreemap_to_hashmap_dart_value",
        argNames: ["btreemap"],
      );

  @override
  BTreeMapStringValue crateDartValueConversionHashmapToBtreemap({
    required Map<String, DartValue> hashmap,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Map_String_dart_value_None(hashmap, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue,
          decodeErrorData: null,
        ),
        constMeta: kCrateDartValueConversionHashmapToBtreemapConstMeta,
        argValues: [hashmap],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDartValueConversionHashmapToBtreemapConstMeta =>
      const TaskConstMeta(
        debugName: "hashmap_to_btreemap",
        argNames: ["hashmap"],
      );

  @override
  BTreeMapStringDartValue crateDartValueConversionHashmapToBtreemapDartValue({
    required Map<String, DartValue> hashmap,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Map_String_dart_value_None(hashmap, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue,
          decodeErrorData: null,
        ),
        constMeta: kCrateDartValueConversionHashmapToBtreemapDartValueConstMeta,
        argValues: [hashmap],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDartValueConversionHashmapToBtreemapDartValueConstMeta =>
      const TaskConstMeta(
        debugName: "hashmap_to_btreemap_dart_value",
        argNames: ["hashmap"],
      );

  Future<void> Function(int, dynamic)
  encode_DartFn_Inputs_dart_function_result_Output_unit_AnyhowException(
    FutureOr<void> Function(DartFunctionResult) raw,
  ) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_dart_function_result(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
        callId: callId,
        ptr: output.ptr,
        rustVecLen: output.rustVecLen,
        dataLen: output.dataLen,
      );
    };
  }

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_BTreeMapStringDartValue => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_BTreeMapStringDartValue => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_BTreeMapStringValue => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_BTreeMapStringValue => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DartQuerySubscriber => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartQuerySubscriber;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DartQuerySubscriber => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartQuerySubscriber;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MobileConvexClient => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MobileConvexClient => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SubscriptionHandle => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SubscriptionHandle => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  BTreeMapStringDartValue
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BTreeMapStringDartValueImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  BTreeMapStringValue
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BTreeMapStringValueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DartQuerySubscriber
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartQuerySubscriber(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartQuerySubscriberImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MobileConvexClient
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MobileConvexClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SubscriptionHandle
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SubscriptionHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DartQuerySubscriber
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartQuerySubscriber(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartQuerySubscriberImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MobileConvexClient
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MobileConvexClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SubscriptionHandle
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SubscriptionHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<void> Function(DartFunctionResult)
  dco_decode_DartFn_Inputs_dart_function_result_Output_unit_AnyhowException(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  Map<String, DartValue> dco_decode_Map_String_dart_value_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_dart_value(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  BTreeMapStringDartValue
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BTreeMapStringDartValueImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  BTreeMapStringValue
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BTreeMapStringValueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DartQuerySubscriber
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartQuerySubscriber(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartQuerySubscriberImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MobileConvexClient
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MobileConvexClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SubscriptionHandle
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SubscriptionHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  QuerySubscriber dco_decode_TraitDef_QuerySubscriber(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DartConvexError dco_decode_box_autoadd_dart_convex_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_convex_error(raw);
  }

  @protected
  DartFunctionResult dco_decode_box_autoadd_dart_function_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_function_result(raw);
  }

  @protected
  DartValue dco_decode_box_autoadd_dart_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_value(raw);
  }

  @protected
  ClientError dco_decode_client_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ClientError_InternalError(msg: dco_decode_String(raw[1]));
      case 1:
        return ClientError_ConvexError(
          err: dco_decode_box_autoadd_dart_convex_error(raw[1]),
        );
      case 2:
        return ClientError_ServerError(msg: dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartConvexError dco_decode_dart_convex_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartConvexError(
      message: dco_decode_String(arr[0]),
      data: dco_decode_dart_value(arr[1]),
    );
  }

  @protected
  DartFunctionResult dco_decode_dart_function_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartFunctionResult_Value(
          dco_decode_box_autoadd_dart_value(raw[1]),
        );
      case 1:
        return DartFunctionResult_ErrorMessage(dco_decode_String(raw[1]));
      case 2:
        return DartFunctionResult_ConvexError(
          dco_decode_box_autoadd_dart_convex_error(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartValue dco_decode_dart_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartValue_Null();
      case 1:
        return DartValue_Int64(dco_decode_i_64(raw[1]));
      case 2:
        return DartValue_Float64(dco_decode_f_64(raw[1]));
      case 3:
        return DartValue_Boolean(dco_decode_bool(raw[1]));
      case 4:
        return DartValue_String(dco_decode_String(raw[1]));
      case 5:
        return DartValue_Bytes(dco_decode_list_prim_u_8_strict(raw[1]));
      case 6:
        return DartValue_Array(dco_decode_list_dart_value(raw[1]));
      case 7:
        return DartValue_Object(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue(
            raw[1],
          ),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<DartValue> dco_decode_list_dart_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_dart_value).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, DartValue)> dco_decode_list_record_string_dart_value(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_dart_value)
        .toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  (String, DartValue) dco_decode_record_string_dart_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_dart_value(arr[1]));
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  BTreeMapStringDartValue
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BTreeMapStringDartValueImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  BTreeMapStringValue
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BTreeMapStringValueImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DartQuerySubscriber
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartQuerySubscriber(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartQuerySubscriberImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MobileConvexClient
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MobileConvexClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SubscriptionHandle
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SubscriptionHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DartQuerySubscriber
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartQuerySubscriber(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartQuerySubscriberImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MobileConvexClient
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MobileConvexClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SubscriptionHandle
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SubscriptionHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_isize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  Map<String, DartValue> sse_decode_Map_String_dart_value_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_dart_value(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  BTreeMapStringDartValue
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BTreeMapStringDartValueImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  BTreeMapStringValue
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BTreeMapStringValueImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DartQuerySubscriber
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartQuerySubscriber(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartQuerySubscriberImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MobileConvexClient
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MobileConvexClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SubscriptionHandle
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SubscriptionHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  DartConvexError sse_decode_box_autoadd_dart_convex_error(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_convex_error(deserializer));
  }

  @protected
  DartFunctionResult sse_decode_box_autoadd_dart_function_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_function_result(deserializer));
  }

  @protected
  DartValue sse_decode_box_autoadd_dart_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_value(deserializer));
  }

  @protected
  ClientError sse_decode_client_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_msg = sse_decode_String(deserializer);
        return ClientError_InternalError(msg: var_msg);
      case 1:
        var var_err = sse_decode_box_autoadd_dart_convex_error(deserializer);
        return ClientError_ConvexError(err: var_err);
      case 2:
        var var_msg = sse_decode_String(deserializer);
        return ClientError_ServerError(msg: var_msg);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartConvexError sse_decode_dart_convex_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    var var_data = sse_decode_dart_value(deserializer);
    return DartConvexError(message: var_message, data: var_data);
  }

  @protected
  DartFunctionResult sse_decode_dart_function_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_dart_value(deserializer);
        return DartFunctionResult_Value(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return DartFunctionResult_ErrorMessage(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_dart_convex_error(deserializer);
        return DartFunctionResult_ConvexError(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartValue sse_decode_dart_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DartValue_Null();
      case 1:
        var var_field0 = sse_decode_i_64(deserializer);
        return DartValue_Int64(var_field0);
      case 2:
        var var_field0 = sse_decode_f_64(deserializer);
        return DartValue_Float64(var_field0);
      case 3:
        var var_field0 = sse_decode_bool(deserializer);
        return DartValue_Boolean(var_field0);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return DartValue_String(var_field0);
      case 5:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return DartValue_Bytes(var_field0);
      case 6:
        var var_field0 = sse_decode_list_dart_value(deserializer);
        return DartValue_Array(var_field0);
      case 7:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue(
              deserializer,
            );
        return DartValue_Object(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<DartValue> sse_decode_list_dart_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DartValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dart_value(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, DartValue)> sse_decode_list_record_string_dart_value(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, DartValue)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_dart_value(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, DartValue) sse_decode_record_string_dart_value(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_dart_value(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue(
    BTreeMapStringDartValue self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BTreeMapStringDartValueImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue(
    BTreeMapStringValue self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BTreeMapStringValueImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartQuerySubscriber(
    DartQuerySubscriber self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DartQuerySubscriberImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
    MobileConvexClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MobileConvexClientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle(
    SubscriptionHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SubscriptionHandleImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartQuerySubscriber(
    DartQuerySubscriber self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DartQuerySubscriberImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
    MobileConvexClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MobileConvexClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle(
    SubscriptionHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SubscriptionHandleImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_DartFn_Inputs_dart_function_result_Output_unit_AnyhowException(
    FutureOr<void> Function(DartFunctionResult) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
      encode_DartFn_Inputs_dart_function_result_Output_unit_AnyhowException(
        self,
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(
      PlatformPointerUtil.ptrToPlatformInt64(
        encodeDartOpaque(
          self,
          portManager.dartHandlerPort,
          generalizedFrbRustBinding,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_Map_String_dart_value_None(
    Map<String, DartValue> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_dart_value(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue(
    BTreeMapStringDartValue self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BTreeMapStringDartValueImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringValue(
    BTreeMapStringValue self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BTreeMapStringValueImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartQuerySubscriber(
    DartQuerySubscriber self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DartQuerySubscriberImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMobileConvexClient(
    MobileConvexClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MobileConvexClientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSubscriptionHandle(
    SubscriptionHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SubscriptionHandleImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_dart_convex_error(
    DartConvexError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_convex_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_function_result(
    DartFunctionResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_function_result(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_value(
    DartValue self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_value(self, serializer);
  }

  @protected
  void sse_encode_client_error(ClientError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ClientError_InternalError(msg: final msg):
        sse_encode_i_32(0, serializer);
        sse_encode_String(msg, serializer);
      case ClientError_ConvexError(err: final err):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_dart_convex_error(err, serializer);
      case ClientError_ServerError(msg: final msg):
        sse_encode_i_32(2, serializer);
        sse_encode_String(msg, serializer);
    }
  }

  @protected
  void sse_encode_dart_convex_error(
    DartConvexError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
    sse_encode_dart_value(self.data, serializer);
  }

  @protected
  void sse_encode_dart_function_result(
    DartFunctionResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartFunctionResult_Value(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_dart_value(field0, serializer);
      case DartFunctionResult_ErrorMessage(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case DartFunctionResult_ConvexError(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_dart_convex_error(field0, serializer);
    }
  }

  @protected
  void sse_encode_dart_value(DartValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartValue_Null():
        sse_encode_i_32(0, serializer);
      case DartValue_Int64(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_i_64(field0, serializer);
      case DartValue_Float64(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_f_64(field0, serializer);
      case DartValue_Boolean(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_bool(field0, serializer);
      case DartValue_String(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
      case DartValue_Bytes(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case DartValue_Array(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_list_dart_value(field0, serializer);
      case DartValue_Object(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringDartValue(
          field0,
          serializer,
        );
    }
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_dart_value(
    List<DartValue> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dart_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_dart_value(
    List<(String, DartValue)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_dart_value(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_dart_value(
    (String, DartValue) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_dart_value(self.$2, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class BTreeMapStringDartValueImpl extends RustOpaque
    implements BTreeMapStringDartValue {
  // Not to be used by end users
  BTreeMapStringDartValueImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BTreeMapStringDartValueImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_BTreeMapStringDartValue,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_BTreeMapStringDartValue,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_BTreeMapStringDartValuePtr,
  );
}

@sealed
class BTreeMapStringValueImpl extends RustOpaque
    implements BTreeMapStringValue {
  // Not to be used by end users
  BTreeMapStringValueImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BTreeMapStringValueImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_BTreeMapStringValue,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_BTreeMapStringValue,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_BTreeMapStringValuePtr,
  );
}

@sealed
class DartQuerySubscriberImpl extends RustOpaque
    implements DartQuerySubscriber {
  // Not to be used by end users
  DartQuerySubscriberImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DartQuerySubscriberImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_DartQuerySubscriber,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_DartQuerySubscriber,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_DartQuerySubscriberPtr,
  );

  Future<void> onUpdate({required DartFunctionResult value}) => RustLib
      .instance
      .api
      .crateDartQuerySubscriberOnUpdate(that: this, value: value);
}

@sealed
class MobileConvexClientImpl extends RustOpaque implements MobileConvexClient {
  // Not to be used by end users
  MobileConvexClientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MobileConvexClientImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MobileConvexClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MobileConvexClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_MobileConvexClientPtr,
  );

  /// Executes an action on the Convex backend.
  Future<DartValue> action({
    required String name,
    required BTreeMapStringValue args,
  }) => RustLib.instance.api.crateMobileConvexClientAction(
    that: this,
    name: name,
    args: args,
  );

  /// Executes a mutation on the Convex backend.
  Future<DartValue> mutation({
    required String name,
    required BTreeMapStringValue args,
  }) => RustLib.instance.api.crateMobileConvexClientMutation(
    that: this,
    name: name,
    args: args,
  );

  /// Executes a query on the Convex backend.
  Future<DartValue> query({
    required String name,
    required BTreeMapStringValue args,
  }) => RustLib.instance.api.crateMobileConvexClientQuery(
    that: this,
    name: name,
    args: args,
  );

  /// Provide an OpenID Connect ID token to be associated with this client.
  ///
  /// Doing so will share that information with the Convex backend and a valid
  /// token will give the backend knowledge of a logged in user.
  ///
  /// Passing [None] for the token will disassociate a previous token,
  /// effectively returning to a logged out state.
  Future<void> setAuth({String? token}) => RustLib.instance.api
      .crateMobileConvexClientSetAuth(that: this, token: token);

  /// Subscribe to updates to a query against the Convex backend.
  ///
  /// The [QuerySubscriber] will be called back with initial query results and
  /// it will continue to get called as the underlying data changes.
  ///
  /// The returned [SubscriptionHandle] can be used to cancel the
  /// subscription.
  Future<SubscriptionHandle> subscribe({
    required String name,
    required BTreeMapStringValue args,
    required FutureOr<void> Function(DartFunctionResult) onUpdate,
  }) => RustLib.instance.api.crateMobileConvexClientSubscribe(
    that: this,
    name: name,
    args: args,
    onUpdate: onUpdate,
  );
}

@sealed
class SubscriptionHandleImpl extends RustOpaque implements SubscriptionHandle {
  // Not to be used by end users
  SubscriptionHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SubscriptionHandleImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SubscriptionHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SubscriptionHandle,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_SubscriptionHandlePtr,
  );

  /// Cancels the subscription by sending a cancellation signal.
  void cancel() =>
      RustLib.instance.api.crateSubscriptionHandleCancel(that: this);
}
